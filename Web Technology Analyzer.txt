# CDN Detector 擴充功能開發 - Claude Code Prompt

我想要擴充我的 Chrome Extension "CDN Detector"，將其升級為全方位的 Web Technology Analyzer，添加類似 WhatWeb/Wappalyzer 的網站技術檢測功能。

## 現有功能基礎
我的 CDN Detector v1.1 目前具備：
- ✅ AspirappsCDN 資源檢測和統計
- ✅ Via Header 快取狀態解析 (HIT/MISS/Unknown)
- ✅ HIT Ratio 統計 (數量比例 + 檔案大小比例)
- ✅ 響應時間監控和檔案大小統計
- ✅ 分標籤頁資源追蹤和隔離
- ✅ 即時日誌管理 (查看/篩選/清除)
- ✅ Manifest V3 + Service Worker 架構
- ✅ 健康檢查機制和重試機制

## 新增功能需求

### 1. 技術棧偵測器 (類似 Wappalyzer)
**目標**：識別網站使用的技術和工具

**檢測項目**：
- **前端框架**：React, Vue, Angular, Svelte, Alpine.js, Lit
- **JavaScript 庫**：jQuery, Lodash, Moment.js, D3.js, Chart.js
- **CSS 框架**：Bootstrap, Tailwind CSS, Bulma, Foundation, Material-UI
- **UI 組件庫**：Ant Design, Element UI, Chakra UI, Vuetify
- **構建工具痕跡**：Webpack, Vite, Parcel, Rollup, Snowpack
- **CMS 系統**：WordPress, Drupal, Joomla, Ghost, Strapi
- **電商平台**：Shopify, WooCommerce, Magento, PrestaShop
- **分析工具**：Google Analytics, Google Tag Manager, Facebook Pixel
- **廣告系統**：Google AdSense, Amazon Associates, 各種廣告網路
- **A/B 測試**：Optimizely, VWO, Google Optimize
- **客服工具**：Intercom, Zendesk, Freshdesk, LiveChat
- **支付系統**：Stripe, PayPal, Square 的前端整合痕跡

**檢測方法**：
- DOM 元素特徵識別 (特定的 class、id、data 屬性)
- JavaScript 全域變數檢測 (window.React, window.Vue 等)
- HTML Meta 標籤分析 (generator, theme-name 等)
- CSS 選擇器模式匹配
- JavaScript 檔案路徑和檔名模式
- HTTP Headers 中的技術標識
- HTML 註解中的版本資訊

**版本檢測**：
- 從 JavaScript 變數中提取版本號
- 分析檔案路徑中的版本標識
- 檢測 CDN 連結中的版本參數
- HTML 註解中的版本宣告

### 2. 效能分析器
**目標**：深度分析網站載入效能和資源使用情況

**檢測項目**：
- **資源載入統計**：
  - 總資源數量和分類 (JS/CSS/Images/Fonts/Others)
  - 檔案大小分佈和總傳輸量
  - 壓縮率分析 (Content-Encoding: gzip/brotli)
  - HTTP/2 Push 資源識別
- **載入時間分析**：
  - DNS 解析時間、連接建立時間
  - 首字節時間 (TTFB)、完整載入時間
  - 各資源類型的平均載入時間
  - 最慢載入的前 10 個資源
- **快取效能**：
  - 資源快取策略分析 (Cache-Control headers)
  - 304 Not Modified 響應統計
  - ETag 和 Last-Modified 使用情況
  - CDN vs Origin 響應時間對比
- **Core Web Vitals 相關**：
  - 資源載入對 LCP 的潛在影響
  - 分析 render-blocking 資源
  - 檢測未使用的 CSS/JS (基於檔案大小推估)
- **效能最佳化建議**：
  - 建議壓縮的大型資源
  - 檢測缺少快取標頭的資源
  - 識別可能的 CDN 遷移機會

### 3. 安全檢查器
**目標**：檢測基本的 Web 安全配置和潛在風險

**檢測項目**：
- **安全性 Headers**：
  - Content-Security-Policy (CSP) 分析和評分
  - X-Frame-Options / frame-ancestors 檢測
  - X-Content-Type-Options: nosniff
  - X-XSS-Protection 設定
  - Strict-Transport-Security (HSTS)
  - Referrer-Policy 配置
  - Permissions-Policy / Feature-Policy
- **HTTPS 配置**：
  - 混合內容檢測 (HTTP 資源在 HTTPS 頁面)
  - SSL/TLS 狀態檢查
  - HSTS 預載入清單檢查
- **隱私權相關**：
  - 第三方追蹤器識別
  - Cookie 設定分析 (Secure, HttpOnly, SameSite)
  - 本地儲存使用情況
- **潛在風險檢測**：
  - 敏感資訊洩露 (console.log, 開發模式痕跡)
  - 過期或有漏洞的庫版本檢測
  - 開發工具殘留檢測
- **合規性檢查**：
  - GDPR 相關檢測 (cookie banner, privacy policy 連結)
  - CCPA 合規性基本檢查

### 4. SEO 分析器
**目標**：分析網站的 SEO 配置和最佳化程度

**檢測項目**：
- **基本 Meta 標籤**：
  - Title 標籤長度和內容分析
  - Meta description 存在性和長度
  - Meta keywords (如果存在)
  - Canonical URL 設定
  - Robots meta tag 分析
- **Open Graph 協議**：
  - og:title, og:description, og:image
  - og:type, og:url, og:site_name
  - Facebook 特定標籤完整性
- **Twitter Cards**：
  - twitter:card, twitter:title, twitter:description
  - twitter:image, twitter:site, twitter:creator
- **結構化資料**：
  - JSON-LD 結構化資料檢測和驗證
  - Microdata 格式檢測
  - Schema.org 類型識別 (Article, Product, Organization 等)
  - Rich Snippets 潛力分析
- **技術 SEO**：
  - Heading 標籤結構 (H1-H6) 層次分析
  - Alt 屬性缺失的圖片統計
  - 內部連結數量和類型
  - Sitemap 和 robots.txt 參考
- **國際化 SEO**：
  - hreflang 標籤檢測
  - 語言和地區設定 (lang 屬性)
- **效能對 SEO 的影響**：
  - 圖片最佳化程度
  - 載入速度對 SEO 的影響評估

## 關鍵約束：保護現有系統穩定性

### 🚨 重要原則：零影響現有功能
**絕對要求**：新增的所有功能必須完全不影響現有 CDN Detector 的穩定運行

#### 現有功能保護機制
1. **CDN 檢測核心邏輯完全隔離**
   - 現有的 `webRequest` 監聽器保持獨立運行
   - AspirappsCDN Via Header 解析邏輯不可修改
   - 分標籤頁追蹤機制必須維持原有架構
   - HIT/MISS 統計算法保持不變

2. **資料結構向後相容**
   - 現有的 `tabDetectionData` 結構不可變更
   - CDN 統計結果的資料格式必須保持一致
   - 儲存機制 (chrome.storage) 的 key 命名不可衝突
   - 現有 API 介面完全保持不變

3. **效能影響控制**
   - 新功能不可增加現有 CDN 檢測的延遲
   - background script 的 CDN 監聽效能不可下降
   - popup 開啟速度必須維持現有水準
   - 記憶體使用量增加不可超過 20%

4. **錯誤隔離機制**
   - 新功能的任何錯誤不可影響 CDN 檢測
   - 各檢測模組間採用 try-catch 完全隔離
   - 新功能載入失敗時，CDN 檢測必須正常運行
   - 降級機制：新功能異常時自動停用，CDN 功能繼續

### 實現策略：漸進式擴展

#### 1. 核心架構擴展 (非破壞性)
```javascript
// 現有架構保持不變
const existingCDNDetector = {
  // 原有的完整 CDN 檢測邏輯
  // 這部分代碼完全不修改
};

// 新增功能採用裝飾器模式
const enhancedDetector = {
  cdnDetector: existingCDNDetector, // 包裝現有功能
  techDetector: new TechDetector(),  // 新增功能
  performanceDetector: new PerformanceDetector(),
  // ...其他新功能
};
```

#### 2. 資料流設計 (並行處理)
- **並行檢測**：新功能與 CDN 檢測並行運行，互不干擾
- **獨立儲存**：新功能使用不同的 storage key 前綴
- **分離事件**：新功能監聽相同事件但使用獨立的處理函數
- **結果合併**：只在 UI 層面整合顯示，底層資料完全分離

#### 3. UI 整合策略 (非破壞性)
- **保留原始 CDN Tab**：現有的 CDN 檢測介面完全保持
- **新增 Tab 系統**：使用 Tab 切換而非替換現有介面
- **漸進式載入**：新功能 Tab 延遲載入，不影響初始開啟速度
- **回退機制**：新 UI 組件載入失敗時，回到原始 CDN 介面

## 技術實現要求

### 架構設計 (保護現有系統)
```
src/
├── core/
│   ├── legacy-cdn-detector.js (現有系統 - 完全不動)
│   ├── detector-engine.js (新增 - 新功能統一引擎)
│   ├── compatibility-layer.js (新增 - 相容性保證層)
│   └── isolation-manager.js (新增 - 功能隔離管理)
├── detectors/
│   ├── cdn/ (現有 CDN 檢測 - 完全隔離)
│   │   ├── cdn-detector.js (原有邏輯不變)
│   │   ├── via-header-parser.js (原有邏輯不變)
│   │   └── cache-analyzer.js (原有邏輯不變)
│   ├── tech/ (新增 - 完全獨立)
│   │   ├── tech-detector.js
│   │   └── framework-identifier.js
│   ├── performance/ (新增 - 完全獨立)
│   │   ├── performance-detector.js
│   │   └── metrics-calculator.js
│   ├── security/ (新增 - 完全獨立)
│   │   ├── security-detector.js
│   │   └── header-analyzer.js
│   └── seo/ (新增 - 完全獨立)
│       ├── seo-detector.js
│       └── meta-analyzer.js
├── storage/ (新增 - 命名空間隔離)
│   ├── cdn-storage.js (包裝現有邏輯)
│   ├── tech-storage.js (新功能專用)
│   ├── performance-storage.js (新功能專用)
│   └── storage-namespace.js (防止 key 衝突)
└── ui/
    ├── legacy/ (現有 UI - 保持不變)
    │   ├── popup.js (原有邏輯)
    │   └── popup.html (原有介面)
    ├── enhanced/ (新增 - 漸進式載入)
    │   ├── enhanced-popup.js
    │   ├── enhanced-popup.html
    │   └── tab-manager.js
    └── components/ (新增 - 新功能專用)
        ├── tech-tab.js
        ├── performance-tab.js
        ├── security-tab.js
        └── seo-tab.js
```

### 關鍵保護措施

#### 1. 命名空間完全隔離
```javascript
// 現有 CDN 功能保持原有命名
const CDN_STORAGE_KEYS = {
  tabDetectionData: 'tabDetectionData',    // 保持不變
  settings: 'cdnDetectorSettings',         // 保持不變
  logs: 'cdnDetectionLogs'                 // 保持不變
};

// 新功能使用完全不同的命名空間
const ENHANCED_STORAGE_KEYS = {
  techData: 'enhanced_tech_detection_data',
  performanceData: 'enhanced_performance_data', 
  securityData: 'enhanced_security_data',
  seoData: 'enhanced_seo_data',
  enhancedSettings: 'enhanced_detector_settings'
};
```

#### 2. 事件監聽器隔離
```javascript
// 現有 CDN 監聽器保持不變
chrome.webRequest.onBeforeRequest.addListener(
  originalCDNListener,  // 現有邏輯完全不變
  {urls: ["<all_urls>"]},
  ["requestHeaders"]
);

// 新功能使用獨立的監聽器
chrome.webRequest.onCompleted.addListener(
  enhancedDetectionListener,  // 新增功能專用
  {urls: ["<all_urls>"]},
  ["responseHeaders"]
);
```

#### 3. 錯誤隔離和降級
```javascript
class IsolatedDetectorManager {
  constructor() {
    this.cdnDetector = new LegacyCDNDetector();  // 現有系統
    this.enhancedFeatures = [];
  }
  
  // 確保 CDN 檢測永遠不會失敗
  async detectCDN(tabId, requestDetails) {
    try {
      return await this.cdnDetector.detect(tabId, requestDetails);
    } catch (error) {
      console.error('CDN Detection Error (isolated):', error);
      // CDN 檢測失敗也要保證基本功能
      return this.cdnDetector.getDefaultResult();
    }
  }
  
  // 新功能完全隔離，失敗不影響 CDN
  async detectEnhancedFeatures(tabId, pageData) {
    for (const detector of this.enhancedFeatures) {
      try {
        await detector.detect(tabId, pageData);
      } catch (error) {
        console.warn(`Enhanced feature ${detector.name} failed:`, error);
        // 單個新功能失敗，其他功能繼續
        detector.disable();
      }
    }
  }
}
```

#### 4. UI 載入策略 (漸進式增強)
```javascript
// 確保原始 CDN UI 優先載入
async function initializePopup() {
  // 1. 首先載入現有 CDN 功能 (必須成功)
  try {
    await loadLegacyCDNInterface();
    console.log('Legacy CDN interface loaded successfully');
  } catch (error) {
    console.error('Critical: Legacy CDN interface failed to load');
    return; // 如果原有功能載入失敗，停止所有操作
  }
  
  // 2. 嘗試載入增強功能 (可選，失敗不影響基本功能)
  try {
    await loadEnhancedFeatures();
    console.log('Enhanced features loaded successfully');
  } catch (error) {
    console.warn('Enhanced features failed to load, fallback to legacy mode');
    showLegacyModeOnly();
  }
}
```

#### 5. 效能保護機制
```javascript
class PerformanceGuard {
  constructor() {
    this.cdnDetectionTime = [];
    this.maxAcceptableDelay = 50; // ms
  }
  
  // 監控 CDN 檢測效能不被影響
  monitorCDNPerformance(startTime, endTime) {
    const duration = endTime - startTime;
    this.cdnDetectionTime.push(duration);
    
    if (duration > this.maxAcceptableDelay) {
      console.warn('CDN detection slower than expected:', duration);
      this.disableEnhancedFeatures();
    }
  }
  
  // 如果新功能影響效能，自動停用
  disableEnhancedFeatures() {
    console.log('Disabling enhanced features to protect CDN performance');
    enhancedDetectorManager.disableAll();
  }
}
```

### 相容性測試要求

#### 必要測試案例
1. **現有功能完整性測試**
   - CDN 檢測準確性不變
   - HIT/MISS 統計精確度保持
   - 分標籤頁隔離機制正常
   - 響應時間測量精度不降低

2. **效能回歸測試**
   - popup 開啟時間不增加
   - background script 記憶體使用合理
   - webRequest 監聽器響應時間不變
   - 大量標籤頁情況下穩定性

3. **錯誤恢復測試**
   - 新功能崩潰時 CDN 檢測繼續運行
   - 儲存空間不足時的降級處理
   - 權限不足時的優雅處理
   - 網路錯誤時的隔離機制

4. **升級相容性測試**
   - 從 v1.1 升級到新版本的平滑性
   - 現有用戶設定和資料不丟失
   - 舊版本資料格式的向前相容

### 部署策略

#### 階段性發布
1. **Beta 版本**：僅包含技術棧檢測，確保穩定性
2. **逐步功能啟用**：用戶可選擇啟用新功能
3. **A/B 測試**：部分用戶先體驗新功能
4. **監控和回滾**：發現問題立即回滾到純 CDN 模式

#### 用戶選擇權
- **經典模式**：只使用原有 CDN 檢測功能
- **增強模式**：包含所有新功能
- **自訂模式**：用戶選擇啟用哪些新功能

### 關鍵技術要求
1. **非侵入式檢測**：只讀取公開資訊，不影響網站運行
2. **效能最佳化**：批次處理、避免阻塞主執行緒
3. **模組化設計**：每個檢測器可獨立啟用/停用
4. **資料結構標準化**：統一的檢測結果格式
5. **向後相容性**：保持現有 CDN 檢測功能完全不變
6. **分標籤頁隔離**：延續現有的分頁隔離機制
7. **即時更新**：支援頁面動態載入內容的檢測
8. **記憶體管理**：定期清理過期資料，避免記憶體洩漏

### UI/UX 設計要求
- **分頁式介面**：Overview + 各功能分頁
- **摺疊式詳細資訊**：類似現有的 CDN 檢測展開功能
- **視覺化圖表**：效能數據的圖表展示
- **評分系統**：安全性和 SEO 的評分機制
- **匯出功能**：支援將檢測結果匯出為 JSON
- **搜尋和篩選**：快速定位特定技術或問題

### 資料儲存和管理
- **持久化設定**：使用者的啟用/停用偏好
- **快取機制**：檢測結果的智慧快取
- **版本管理**：指紋庫的版本控制和更新機制
- **匯出格式**：標準化的檢測報告格式

## 具體實現細節需求

### 檢測觸發機制
- 頁面載入完成後自動檢測
- 支援 SPA 路由變更的重新檢測
- 手動刷新功能
- 背景檢測模式 (可選)

### 錯誤處理和降級
- 檢測失敗時的優雅降級
- 權限不足時的提示機制
- 網路錯誤的重試策略

### 效能考量
- 檢測過程不應影響頁面載入速度
- 大型網站的檢測最佳化
- 記憶體使用量控制

## 預期成果

完成後的擴充功能應該：
1. 保持原有 CDN 檢測功能的完整性和穩定性
2. 提供全面的網站技術棧分析
3. 具備專業級的效能分析能力
4. 包含基本但實用的安全性檢查
5. 支援 SEO 最佳化分析
6. 擁有直觀且專業的使用者介面
7. 可與其他開發者工具良好整合

請幫我設計和實現這個全方位的 Web Technology Analyzer，重點是：
1. 模組化和可擴展的架構設計
2. 高效能的檢測算法實現
3. 完整的指紋識別規則庫
4. 使用者友好的介面設計
5. 與現有功能的無縫整合

讓我們開始打造一個比 Wappalyzer 更專業、比 WhatWeb 更易用的 Chrome 擴充功能！